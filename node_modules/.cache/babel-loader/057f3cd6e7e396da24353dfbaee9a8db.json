{"ast":null,"code":"var _jsxFileName = \"E:\\\\CSR-master\\\\src\\\\client\\\\context\\\\employer.js\";\nimport React, { Component, createContext } from 'react';\nimport axios from \"axios\";\nimport history from \"../../history\";\nimport { UserContext } from \"./user\"; // Importing toastify module \n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure(); // context\n\nconst EmployerContext = createContext(); // provider\n\nclass EmployerProvider extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      url: \"http://excodeteam.com/crs/api/v1\",\n      profile: {\n        countries: [],\n        employeeInfo: {}\n      },\n      categoriesListToken: [],\n      employerJobs: [],\n      job: {},\n      proposals: {},\n      jobStatus: \"\",\n      lastProposals: [],\n      total: {\n        totalJobs: 0,\n        totalProposals: 0,\n        totalCompletedJobs: 0\n      },\n      myEmployees: [],\n      myEmployeeProfile: {},\n      loading: false\n    };\n\n    this.authHeader = () => {\n      const user = JSON.parse(localStorage.getItem('user'));\n\n      if (user && user.token) {\n        return {\n          Authorization: `Bearer ${user.token}`\n        };\n      } else {\n        // redirect to login page\n        return {};\n      }\n    };\n\n    this.getProfile = async () => {\n      this.setState({\n        loading: true\n      });\n      await axios({\n        method: 'get',\n        url: `${this.state.url}/employee/get_profile`,\n        headers: this.authHeader()\n      }).then(res => {\n        const {\n          categories,\n          countries,\n          data\n        } = res.data;\n        this.setState({\n          profile: {\n            categories,\n            countries,\n            employeeInfo: data\n          }\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.setProfile = async _ref => {\n      let {\n        photo,\n        name,\n        birthDate,\n        email,\n        mobile,\n        country,\n        address,\n        city,\n        state,\n        zipCode\n      } = _ref;\n      const fd = new FormData();\n      fd.append(\"photo\", photo);\n      fd.append(\"name\", name);\n      fd.append(\"birthDate\", birthDate);\n      fd.append(\"email\", email);\n      fd.append(\"mobile\", mobile);\n      fd.append(\"country_id\", country);\n      fd.append(\"address\", address);\n      fd.append(\"city\", city);\n      fd.append(\"state\", state);\n      fd.append(\"zipCode\", zipCode);\n      this.setState({\n        loading: true\n      });\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employee/set_profile`,\n        headers: this.authHeader(),\n        data: fd\n      }).then(async res => {\n        await this.getProfile();\n        const {\n          userRefresh\n        } = this.context;\n        userRefresh(this.state.profile.employeeInfo);\n        toast.success('Success saved chenged', {\n          autoClose: 2000,\n          position: toast.POSITION.TOP_CENTER\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.getCategoriesListToken = async () => {\n      await axios({\n        method: 'get',\n        url: `${this.state.url}/employer/add_job`,\n        headers: this.authHeader()\n      }).then(res => {\n        const {\n          data\n        } = res.data;\n        const categoriesListToken = data;\n        this.setState({\n          categoriesListToken\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n    };\n\n    this.addJob = async _ref2 => {\n      let {\n        title,\n        category,\n        subCategory,\n        details,\n        offer,\n        requirements,\n        responsibilities,\n        finishAt,\n        image\n      } = _ref2;\n      console.log({\n        title,\n        category,\n        details,\n        offer,\n        requirements,\n        responsibilities,\n        finishAt,\n        image\n      });\n      const fd = new FormData();\n      fd.append(\"title\", title);\n      fd.append(\"category_id\", category);\n      fd.append(\"sub_category\", subCategory);\n      fd.append(\"details\", details);\n      fd.append(\"offer\", offer);\n      fd.append(\"requirements\", requirements);\n      fd.append(\"responsibility\", responsibilities);\n      fd.append(\"finish_at\", finishAt);\n      fd.append(\"image\", image); // for (var pair of fd.entries()) {\n      //     console.log(pair[0]+ ', ' + pair[1]); \n      // }\n\n      this.setState({\n        loading: true\n      });\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/add_job`,\n        headers: this.authHeader(),\n        data: fd\n      }).then(res => {\n        toast.success('Success Add Job', {\n          autoClose: 2000,\n          position: toast.POSITION.TOP_CENTER\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.getEmployerJobs = async () => {\n      this.setState({\n        loading: true,\n        jobStatus: \"\"\n      });\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/jobs`,\n        headers: this.authHeader()\n      }).then(res => {\n        const {\n          data\n        } = res.data;\n        const employerJobs = data;\n        this.setState({\n          employerJobs\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.getJobWithProposals = async id => {\n      this.setState({\n        loading: true\n      });\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/jobs`,\n        headers: this.authHeader(),\n        data: {\n          \"job_id\": id\n        }\n      }).then(res => {\n        console.log(res);\n        const {\n          job,\n          proposals\n        } = res.data;\n        this.setState({\n          job,\n          proposals\n        });\n      }, error => {\n        console.log(error);\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.closeJob = async id => {\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/close_job`,\n        headers: this.authHeader(),\n        data: {\n          \"job_id\": id\n        }\n      }).then(res => {\n        const {\n          data,\n          job_status\n        } = res.data;\n        this.setState({\n          employerJobs: data,\n          jobStatus: job_status\n        });\n        toast.success('Success Closed Job', {\n          autoClose: 2000,\n          position: toast.POSITION.TOP_CENTER\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n    };\n\n    this.openJob = async id => {\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/open_job`,\n        headers: this.authHeader(),\n        data: {\n          \"job_id\": id\n        }\n      }).then(res => {\n        const {\n          data,\n          job_status\n        } = res.data;\n        this.setState({\n          employerJobs: data,\n          jobStatus: job_status\n        });\n        toast.success('Success Opened Job', {\n          autoClose: 2000,\n          position: toast.POSITION.TOP_CENTER\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n    };\n\n    this.processJob = async id => {\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/proccess_job`,\n        headers: this.authHeader(),\n        data: {\n          \"job_id\": id\n        }\n      }).then(res => {\n        const {\n          data,\n          job_status\n        } = res.data;\n        this.setState({\n          employerJobs: data,\n          jobStatus: job_status\n        });\n        toast.success('Success Processed Job', {\n          autoClose: 2000,\n          position: toast.POSITION.TOP_CENTER\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n    };\n\n    this.deleteJob = async (id, status) => {\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/delete_job`,\n        headers: this.authHeader(),\n        data: {\n          \"job_id\": id\n        }\n      }).then(res => {\n        // const { data } = res.data;\n        toast.success('Success Delete Job', {\n          autoClose: 2000,\n          position: toast.POSITION.TOP_CENTER\n        });\n      }, error => {\n        console.log(error);\n      });\n      this.getJobs(status);\n    };\n\n    this.getLastProposals = async () => {\n      this.setState({\n        loading: true\n      });\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer`,\n        headers: this.authHeader()\n      }).then(res => {\n        const {\n          data,\n          total_jobs,\n          total_proposals,\n          total_complete_jobs\n        } = res.data;\n        const lastProposals = data;\n        this.setState({\n          lastProposals,\n          total: {\n            totalJobs: total_jobs,\n            totalProposals: total_proposals,\n            totalCompletedJobs: total_complete_jobs\n          }\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.viewProposal = async id => {\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/view_proposal`,\n        headers: this.authHeader(),\n        data: {\n          \"proposal_id\": id\n        }\n      }).then(res => {\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n    };\n\n    this.acceptProposal = async id => {\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/accept_proposal`,\n        headers: this.authHeader(),\n        data: {\n          \"proposal_id\": id\n        }\n      }).then(res => {\n        const {\n          data\n        } = res.data;\n        const proposals = data;\n        this.setState({\n          proposals\n        });\n        toast.success('Success Accepted Proposal', {\n          autoClose: 2000,\n          position: toast.POSITION.TOP_CENTER\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n    };\n\n    this.selectProposal = async id => {\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/select_proposal`,\n        headers: this.authHeader(),\n        data: {\n          \"proposal_id\": id\n        }\n      }).then(res => {\n        const {\n          data\n        } = res.data;\n        const proposals = data;\n        this.setState({\n          proposals\n        });\n        toast.success('Success Selected Proposal', {\n          autoClose: 2000,\n          position: toast.POSITION.TOP_CENTER\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n    };\n\n    this.rejectProposal = async id => {\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/reject_proposal`,\n        headers: this.authHeader(),\n        data: {\n          \"proposal_id\": id\n        }\n      }).then(res => {\n        const {\n          data\n        } = res.data;\n        const proposals = data;\n        this.setState({\n          proposals\n        });\n        toast.success('Success Rejected Proposal', {\n          autoClose: 2000,\n          position: toast.POSITION.TOP_CENTER\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n    };\n\n    this.getMyEmployees = async () => {\n      this.setState({\n        loading: true\n      });\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/employer/my_employees`,\n        headers: this.authHeader()\n      }).then(res => {\n        const {\n          data\n        } = res.data;\n        const myEmployees = data;\n        this.setState({\n          myEmployees\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.getMyEmployeeProfile = async id => {\n      this.setState({\n        loading: true\n      });\n      await axios({\n        method: 'post',\n        url: `${this.state.url}/admin/get_employees`,\n        headers: this.authHeader(),\n        data: {\n          \"employee_id\": id\n        }\n      }).then(res => {\n        const {\n          data,\n          prposals\n        } = res.data;\n        this.setState({\n          myEmployeeProfile: data\n        });\n        console.log(res);\n      }, error => {\n        console.log(error);\n      });\n      this.setState({\n        loading: false\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(EmployerContext.Provider, {\n      value: { ...this.state,\n        getProfile: this.getProfile,\n        setProfile: this.setProfile,\n        getCategoriesListToken: this.getCategoriesListToken,\n        addJob: this.addJob,\n        getEmployerJobs: this.getEmployerJobs,\n        getJobWithProposals: this.getJobWithProposals,\n        closeJob: this.closeJob,\n        openJob: this.openJob,\n        processJob: this.processJob,\n        deleteJob: this.deleteJob,\n        getLastProposals: this.getLastProposals,\n        viewProposal: this.viewProposal,\n        acceptProposal: this.acceptProposal,\n        selectProposal: this.selectProposal,\n        rejectProposal: this.rejectProposal,\n        getMyEmployees: this.getMyEmployees,\n        getMyEmployeeProfile: this.getMyEmployeeProfile\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n} // consumer\n\n\nconst EmployerConsumer = EmployerContext.Consumer;\nexport { EmployerConsumer, EmployerContext };\nEmployerProvider.contextType = UserContext;\nexport default EmployerProvider;","map":{"version":3,"sources":["E:/CSR-master/src/client/context/employer.js"],"names":["React","Component","createContext","axios","history","UserContext","toast","configure","EmployerContext","EmployerProvider","state","url","profile","countries","employeeInfo","categoriesListToken","employerJobs","job","proposals","jobStatus","lastProposals","total","totalJobs","totalProposals","totalCompletedJobs","myEmployees","myEmployeeProfile","loading","authHeader","user","JSON","parse","localStorage","getItem","token","Authorization","getProfile","setState","method","headers","then","res","categories","data","console","log","error","setProfile","photo","name","birthDate","email","mobile","country","address","city","zipCode","fd","FormData","append","userRefresh","context","success","autoClose","position","POSITION","TOP_CENTER","getCategoriesListToken","addJob","title","category","subCategory","details","offer","requirements","responsibilities","finishAt","image","getEmployerJobs","getJobWithProposals","id","closeJob","job_status","openJob","processJob","deleteJob","status","getJobs","getLastProposals","total_jobs","total_proposals","total_complete_jobs","viewProposal","acceptProposal","selectProposal","rejectProposal","getMyEmployees","getMyEmployeeProfile","prposals","render","props","children","EmployerConsumer","Consumer","contextType"],"mappings":"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","sourcesContent":["import React, { Component, createContext } from 'react';\nimport axios from \"axios\";\nimport history from \"../../history\";\nimport { UserContext } from \"./user\";\n// Importing toastify module \nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure();\n\n// context\nconst EmployerContext = createContext();\n\n// provider\nclass EmployerProvider extends Component {\n\n    state = {\n        url: \"http://excodeteam.com/crs/api/v1\",\n        profile: {\n            countries: [],\n            employeeInfo: {},\n        },\n        categoriesListToken: [],\n        employerJobs: [],\n        job: {},\n        proposals: {},\n        jobStatus: \"\",\n        lastProposals: [],\n        total: {\n            totalJobs: 0,\n            totalProposals: 0,\n            totalCompletedJobs: 0,\n        },\n        myEmployees: [],\n        myEmployeeProfile: {},\n        loading: false,\n    }\n\n    authHeader = () => {\n        const user = JSON.parse(localStorage.getItem('user'));\n        if (user && user.token) {\n            return { Authorization: `Bearer ${user.token}` };\n        } else {\n            // redirect to login page\n            return {};\n        }\n    }\n\n    getProfile = async () => {\n        this.setState({ loading: true });\n        await axios({\n            method: 'get',\n            url: `${this.state.url}/employee/get_profile`,\n            headers: this.authHeader(),\n        }).then(\n            res => {\n                const { categories, countries, data } = res.data;\n                this.setState({\n                    profile: {\n                        categories,\n                        countries,\n                        employeeInfo: data,\n                    }\n                })\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n        this.setState({ loading: false });\n    }\n\n    setProfile = async ({ photo, name, birthDate, email, mobile, country, address, city, state, zipCode }) => {\n        const fd = new FormData();\n        fd.append(\"photo\", photo);\n        fd.append(\"name\", name);\n        fd.append(\"birthDate\", birthDate);\n        fd.append(\"email\", email);\n        fd.append(\"mobile\", mobile);\n        fd.append(\"country_id\", country);\n        fd.append(\"address\", address);\n        fd.append(\"city\", city);\n        fd.append(\"state\", state);\n        fd.append(\"zipCode\", zipCode);\n\n        this.setState({ loading: true });\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employee/set_profile`,\n            headers: this.authHeader(),\n            data: fd,\n        }).then(\n            async res => {\n                await this.getProfile();\n                const { userRefresh } = this.context;\n                userRefresh(this.state.profile.employeeInfo);\n                toast.success('Success saved chenged', { autoClose: 2000, position: toast.POSITION.TOP_CENTER })\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n        this.setState({ loading: false });\n    }\n\n    getCategoriesListToken = async () => {\n        await axios({\n            method: 'get',\n            url: `${this.state.url}/employer/add_job`,\n            headers: this.authHeader(),\n        }).then(\n            res => {\n                const { data } = res.data;\n                const categoriesListToken = data;\n                this.setState({ categoriesListToken });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n    }\n\n    addJob = async ({ title, category, subCategory, details, offer, requirements, responsibilities, finishAt, image }) => {\n        console.log({ title, category, details, offer, requirements, responsibilities, finishAt, image });\n        const fd = new FormData();\n        fd.append(\"title\", title);\n        fd.append(\"category_id\", category);\n        fd.append(\"sub_category\", subCategory);\n        fd.append(\"details\", details);\n        fd.append(\"offer\", offer);\n        fd.append(\"requirements\", requirements);\n        fd.append(\"responsibility\", responsibilities);\n        fd.append(\"finish_at\", finishAt);\n        fd.append(\"image\", image);\n        // for (var pair of fd.entries()) {\n        //     console.log(pair[0]+ ', ' + pair[1]); \n        // }\n        this.setState({ loading: true });\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/add_job`,\n            headers: this.authHeader(),\n            data: fd,\n        }).then(\n            res => {\n                toast.success('Success Add Job', { autoClose: 2000, position: toast.POSITION.TOP_CENTER })\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n        this.setState({ loading: false });\n    }\n\n    getEmployerJobs = async () => {\n        this.setState({ loading: true, jobStatus: \"\" });\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/jobs`,\n            headers: this.authHeader(),\n        }).then(\n            res => {\n                const { data } = res.data;\n                const employerJobs = data;\n                this.setState({ employerJobs });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n        this.setState({ loading: false });\n    }\n\n    getJobWithProposals = async (id) => {\n        this.setState({ loading: true });\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/jobs`,\n            headers: this.authHeader(),\n            data: { \"job_id\": id },\n        }).then(\n            res => {\n                console.log(res);\n                const { job, proposals } = res.data;\n                this.setState({\n                    job,\n                    proposals\n                });\n            },\n            error => {\n                console.log(error);\n            }\n        )\n        this.setState({ loading: false });\n    }\n\n    closeJob = async (id) => {\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/close_job`,\n            headers: this.authHeader(),\n            data: { \"job_id\": id },\n        }).then(\n            res => {\n                const { data, job_status } = res.data;\n                this.setState({ employerJobs: data, jobStatus: job_status });\n                toast.success('Success Closed Job', { autoClose: 2000, position: toast.POSITION.TOP_CENTER });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n    }\n\n    openJob = async (id) => {\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/open_job`,\n            headers: this.authHeader(),\n            data: { \"job_id\": id },\n        }).then(\n            res => {\n                const { data, job_status } = res.data;\n                this.setState({ employerJobs: data, jobStatus: job_status });\n                toast.success('Success Opened Job', { autoClose: 2000, position: toast.POSITION.TOP_CENTER });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n    }\n\n    processJob = async (id) => {\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/proccess_job`,\n            headers: this.authHeader(),\n            data: { \"job_id\": id },\n        }).then(\n            res => {\n                const { data, job_status } = res.data;\n                this.setState({ employerJobs: data, jobStatus: job_status });\n                toast.success('Success Processed Job', { autoClose: 2000, position: toast.POSITION.TOP_CENTER });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n    }\n\n    deleteJob = async (id, status) => {\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/delete_job`,\n            headers: this.authHeader(),\n            data: { \"job_id\": id },\n        }).then(\n            res => {\n                // const { data } = res.data;\n                toast.success('Success Delete Job', { autoClose: 2000, position: toast.POSITION.TOP_CENTER });\n            },\n            error => {\n                console.log(error);\n            }\n        );\n        this.getJobs(status);\n    }\n\n    getLastProposals = async () => {\n        this.setState({ loading: true });\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer`,\n            headers: this.authHeader(),\n        }).then(\n            res => {\n                const { data, total_jobs, total_proposals, total_complete_jobs } = res.data;\n                const lastProposals = data;\n                this.setState({\n                    lastProposals,\n                    total: {\n                        totalJobs: total_jobs,\n                        totalProposals: total_proposals,\n                        totalCompletedJobs: total_complete_jobs,\n                    }\n                });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n        this.setState({ loading: false });\n    }\n\n    viewProposal = async (id) => {\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/view_proposal`,\n            headers: this.authHeader(),\n            data: { \"proposal_id\": id },\n        }).then(\n            res => {\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n    }\n\n    acceptProposal = async (id) => {\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/accept_proposal`,\n            headers: this.authHeader(),\n            data: { \"proposal_id\": id },\n        }).then(\n            res => {\n                const { data } = res.data;\n                const proposals = data;\n                this.setState({ proposals });\n                toast.success('Success Accepted Proposal', { autoClose: 2000, position: toast.POSITION.TOP_CENTER });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n    }\n\n    selectProposal = async (id) => {\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/select_proposal`,\n            headers: this.authHeader(),\n            data: { \"proposal_id\": id },\n        }).then(\n            res => {\n                const { data } = res.data;\n                const proposals = data;\n                this.setState({ proposals });\n                toast.success('Success Selected Proposal', { autoClose: 2000, position: toast.POSITION.TOP_CENTER });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n    }\n\n    rejectProposal = async (id) => {\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/reject_proposal`,\n            headers: this.authHeader(),\n            data: { \"proposal_id\": id },\n        }).then(\n            res => {\n                const { data } = res.data;\n                const proposals = data;\n                this.setState({ proposals });\n                toast.success('Success Rejected Proposal', { autoClose: 2000, position: toast.POSITION.TOP_CENTER });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n    }\n\n    getMyEmployees = async () => {\n        this.setState({ loading: true });\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/employer/my_employees`,\n            headers: this.authHeader(),\n        }).then(\n            res => {\n                const { data } = res.data;\n                const myEmployees = data;\n                this.setState({ myEmployees });\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n        this.setState({ loading: false });\n\n    }\n\n    getMyEmployeeProfile = async (id) => {\n        this.setState({ loading: true });\n        await axios({\n            method: 'post',\n            url: `${this.state.url}/admin/get_employees`,\n            headers: this.authHeader(),\n            data: { \"employee_id\": id }\n        }).then(\n            res => {\n                const { data, prposals } = res.data;\n                this.setState({\n                    myEmployeeProfile: data\n                })\n                console.log(res);\n            },\n            error => {\n                console.log(error);\n            }\n        )\n        this.setState({ loading: false });\n    }\n\n    render() {\n        return (\n            <EmployerContext.Provider value={{\n                ...this.state,\n\n                getProfile: this.getProfile,\n                setProfile: this.setProfile,\n\n                getCategoriesListToken: this.getCategoriesListToken,\n                addJob: this.addJob,\n                getEmployerJobs: this.getEmployerJobs,\n                getJobWithProposals: this.getJobWithProposals,\n\n                closeJob: this.closeJob,\n                openJob: this.openJob,\n                processJob: this.processJob,\n                deleteJob: this.deleteJob,\n\n                getLastProposals: this.getLastProposals,\n\n                viewProposal: this.viewProposal,\n                acceptProposal: this.acceptProposal,\n                selectProposal: this.selectProposal,\n                rejectProposal: this.rejectProposal,\n\n                getMyEmployees: this.getMyEmployees,\n                getMyEmployeeProfile: this.getMyEmployeeProfile,\n            }}>\n                {this.props.children}\n            </EmployerContext.Provider>\n        )\n    }\n}\n\n// consumer\nconst EmployerConsumer = EmployerContext.Consumer;\n\nexport { EmployerConsumer, EmployerContext };\nEmployerProvider.contextType = UserContext;\nexport default EmployerProvider;"]},"metadata":{},"sourceType":"module"}